# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# trigger:
#- '*'
#
trigger:
- master

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
        - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersionBuild: '3.1.100'
      dotnetSdkVersionSonar: '2.2.103'

    steps:
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core SDK $(dotnetSdkVersionSonar) For Sonar Cloud'
      inputs:
        version: '$(dotnetSdkVersionSonar)'

    - script: dotnet --list-sdks
      displayName: 'Check dotnet sdks'


    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: '.NET-SpaceGame'
        organization: 'test-project-devops'
        scannerMode: 'MSBuild'
        projectKey: '.NET-SpaceGame'

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'
    # gulp tasks  minifies JavaScript and CSS assets
    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersionBuild)'
      inputs:
        packageType: sdk
        version: '$(dotnetSdkVersionBuild)'

    - script: dotnet --list-sdks
      displayName: 'Check dotnet sdks'
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core SDK $(dotnetSdkVersionSonar) For Sonar Cloud'
      inputs:
        version: '$(dotnetSdkVersionSonar)'
    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
    
  #  - task: CmdLine@1
  #    inputs:
  #      script: curl -LJO https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar 
  #    displayName: 'Download the latest Unified Agent'

  #  - task: CmdLine@2
  #    displayName: 'Download the latest Unified Agent'
  #    inputs:
  #      script: 'curl -LJO https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar'
    
  #  - task: CmdLine@2
  #    inputs:
  #      script: 'java -jar wss-unified-agent.jar -c agent_dev.config -apiKey 7018d66ec77b40b4b3b4002797f1f059280c637834ae4701961d5f0a4f8e17b3 -product Small_Test -project DotNet-Space'
   # - task: WhiteSource@20
   #   displayName: 'Run Unified Agent Scan'
   # - script: java -jar wss-unified-agent.jar -c agent_dev.config -apiKey 7018d66ec77b40b4b3b4002797f1f059280c637834ae4701961d5f0a4f8e17b3 -product Small_Test -project DotNet-Space
      #workingDirectory: ''#$(wwwrootDir)

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersionBuild)'
      inputs:
        packageType: sdk
        version: '$(dotnetSdkVersionBuild)'
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()

  #  - task: WhiteSource@20
  #    inputs:
  #      cwd: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/'
  #      extensions: '.dll'
  #      checkPolicies: 'SEND_ALERTS'
  #      productName: 'Small_Test'
  #      projectRule: 'projectName'
  #      projectName: 'DotNet-Space'
  #      WhiteSourceService: 'WhiteSource_DotNet'
   


- stage: 'Deploy'
  displayName: 'Deploy the web application'
  dependsOn: Build
  jobs: 
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: dev
    #variables:
    #- group: 'Release Pipeline'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
            #- task: DownloadPipelineArtifact@2
             # inputs:
             #   buildType: 'current'
              #  artifactName: 'drop'
              #  targetPath: '$(Pipeline.Workspace)'

         # - task: AzureWebApp@1
         #   inputs:
         #       appType: 'webAppLinux'
         #       appName: 'space-game-zap'
         #       #package: '$(System.DefaultWorkingDirectory)/**/*.zip'
         #       package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip' #'$(Pipeline.Workspace)/**/*.zip'


          - task: AzureWebApp@1
            inputs:
                azureSubscription: 'space-game-zap'
                appType: 'webAppLinux'
                appName: 'space-game-zap'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'#'$(System.DefaultWorkingDirectory)/**/*.zip'


          - task: owaspzap@1
            displayName: 'ZAP'
            inputs:
              scantype: 'targetedScan'
              url: 'http://space-game-zap.azurewebsites.net/'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/owaspzap'
              ArtifactName: 'Zap Reports'
          #    publishLocation: 'Container'